{"version":3,"sources":["logo.svg","components/LineChart.js","components/searchInput.js","components/PlayerResultRow.js","components/PlayerResults.js","components/filterPlayer.js","components/SummaryTable.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","width","height","margin","top","right","bottom","left","LineChart","state","passing_yards_gained","rushing_yards_gained","receiving_yards_gained","xScale","d3","range","yScale","yScale2","lineGenerator","xAxis","scale","tickFormat","ticks","yAxis","d","yAxis2","yAxisLabel","append","text","this","refs","call","fill","stroke","strokeWidth","ref","transform","nextProps","prevState","data","timeDomain","year","passMax","pass","rushMax","rush","receiveMax","receive","domain","x","y","Component","SearchInput","handleChange","event","props","textChange","className","onChange","PureComponent","PlayerResultRow","onClick","onSelect","title","PlayerResults","playerData","map","key","filter","searchText","maxResults","playerList","player","toLowerCase","includes","slice","SummaryTable","selectedOption","id","App","handleSelect","setState","handleSearchChange","filteredPlayer","filterPlayer","target","value","axios","get","then","parseTime","forEach","game_year","callAPI","prevProps","bind","role","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"js/main.c90cc31e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"media/logo.25bf045c.svg\";","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\n\nconst width = 900;\nconst height = 600;\nconst margin = { top: 20, right: 40, bottom: 60, left: 50 };\nconst red = \"#eb6a5b\";\nconst blue = \"#52b6ca\";\nconst green = \"#106b21\";\n\nclass LineChart extends Component {\n  state = {\n    passing_yards_gained: null, // svg path command for all the pass temps\n    rushing_yards_gained: null, // svg path command for rush temps,\n    receiving_yards_gained: null,\n    // d3 helpers\n    xScale: d3.scaleTime().range([margin.left, width - margin.right]),\n    yScale: d3.scaleLinear().range([height - margin.bottom, margin.top]),\n    yScale2: d3.scaleLinear().range([height - margin.bottom, margin.top]),\n    lineGenerator: d3.line()\n  };\n\n  xAxis = d3\n    .axisBottom()\n    .scale(this.state.xScale)\n    .tickFormat(d3.timeFormat(\"%Y\"))\n    .ticks(d3.timeYear);\n  yAxis = d3\n    .axisLeft()\n    .scale(this.state.yScale)\n    .tickFormat(d => d);\n  // .attr(\"fill\", \"red\");\n\n  yAxis2 = d3\n    .axisRight()\n    .scale(this.state.yScale2)\n    .tickFormat(d => d);\n\n  yAxisLabel = d3\n    .select(this.state.yAxis)\n    .append(\"text\")\n    // .attr(\"x\", 0)\n    // .attr(\"y\", 0)\n    .text(\"Label Test\");\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (!nextProps.data) return null; // data hasn't been loaded yet so do nothing\n    const { data } = nextProps;\n    const { xScale, yScale, yScale2, lineGenerator } = prevState;\n\n    // data has changed, so recalculate scale domains\n    const timeDomain = d3.extent(data, d => d.year);\n    const passMax = d3.max(data, d => d.pass);\n    const rushMax = d3.max(data, d => d.rush);\n    const receiveMax = d3.max(data, d => d.receive);\n\n    xScale.domain(timeDomain);\n    yScale.domain([0, passMax]);\n\n    if (rushMax > receiveMax) {\n      yScale2.domain([0, rushMax]);\n    } else {\n      yScale2.domain([0, receiveMax]);\n    }\n    // calculate line for rushing_yards_gained\n    lineGenerator.x(d => xScale(d.year));\n    lineGenerator.y(d => yScale2(d.rush));\n\n    const rushing_yards_gained = lineGenerator(data);\n\n    // and then passing_yards_gained\n    lineGenerator.y(d => yScale(d.pass));\n    const passing_yards_gained = lineGenerator(data);\n\n    // and then receiving_yards_gained\n    lineGenerator.y(d => yScale2(d.receive));\n    const receiving_yards_gained = lineGenerator(data);\n\n    return {\n      rushing_yards_gained,\n      passing_yards_gained,\n      receiving_yards_gained\n    };\n  }\n\n  componentDidUpdate() {\n    d3.select(this.refs.xAxis).call(this.xAxis);\n    d3.select(this.refs.yAxis).call(this.yAxis);\n    d3.select(this.refs.yAxis2).call(this.yAxis2);\n  }\n\n  render() {\n    return (\n      <svg width={width} height={height}>\n        <path\n          d={this.state.passing_yards_gained}\n          fill=\"none\"\n          stroke={red}\n          strokeWidth=\"2\"\n        />\n        <path\n          d={this.state.rushing_yards_gained}\n          fill=\"none\"\n          stroke={blue}\n          strokeWidth=\"2\"\n        />\n        <path\n          d={this.state.receiving_yards_gained}\n          fill=\"none\"\n          stroke={green}\n          strokeWidth=\"2\"\n        />\n        <g>\n          <g\n            ref=\"xAxis\"\n            transform={`translate(0, ${height - margin.bottom})`}\n          />\n\n          <g ref=\"yAxis\" transform={`translate(${margin.left}, 0)`} />\n          <g ref=\"yAxisLabel\" transform={`translate(100, 300)`} />\n          <g ref=\"yAxis2\" transform={`translate(${width - margin.right}, 0)`} />\n        </g>\n      </svg>\n    );\n  }\n}\n\nexport default LineChart;\n","import React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"../SearchInput.css\";\n\nexport default class SearchInput extends PureComponent {\n  static propTypes = {\n    textChange: PropTypes.func\n  };\n\n  handleChange = event => {\n    this.props.textChange(event);\n  };\n\n  render() {\n    return (\n      <div className=\"component-search-input\">\n        <div>\n          <input onChange={this.handleChange} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"../playerResultRow.css\";\n// import { Select } from \"react-select\";\n\nexport default class PlayerResultRow extends PureComponent {\n  static propTypes = {\n    title: PropTypes.string\n  };\n\n  render() {\n    return (\n      <div\n        onClick={() => this.props.onSelect(this.props.title)}\n        className=\"component-player-result-row copy-to-clipboard\"\n      >\n        <span className=\"title\">{this.props.title}</span>\n      </div>\n    );\n  }\n}\n","import React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport PlayerResultRow from \"./PlayerResultRow\";\nimport \"../playerResults.css\";\n\nexport default class PlayerResults extends PureComponent {\n  static propTypes = {\n    playerData: PropTypes.array\n  };\n\n  componentDidMount() {}\n\n  componentWillUnmount() {}\n\n  render() {\n    const { onSelect } = this.props;\n    return (\n      <div className=\"component-player-results\">\n        {this.props.playerData.map(playerData => (\n          <PlayerResultRow\n            key={playerData.title}\n            title={playerData.title}\n            onSelect={onSelect}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n","import playerList from \"../playerList.json\";\n\nexport default function filter(searchText, maxResults) {\n  return playerList\n    .filter(player => {\n      if (player.title.toLowerCase().includes(searchText.toLowerCase())) {\n        return true;\n      }\n      // if (player.keywords.includes(searchText)) {\n      //   return true;\n      // }\n      return false;\n    })\n    .slice(0, maxResults);\n}\n","import React, { Component } from \"react\";\n\nclass SummaryTable extends Component {\n  //   state = {\n  //     selectedOption: this.state.selectedOption\n  //   };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedOption: \"E.Manning\"\n    };\n  }\n\n  render() {\n    return (\n      <div id=\"summary\" className=\"card\">\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">\n            Snapshot for {this.props.selectedOption}\n          </h5>\n          {/* <h6 className=\"card-subtitle mb-2 text-muted\">Card subtitle</h6>\n          <p className=\"card-text\">\n            Some quick example text to build on the card title and make up the\n            bulk of the card's content.\n          </p>\n          <a href=\"#\" className=\"card-link\">\n            Card link\n          </a>\n          <a href=\"#\" className=\"card-link\">\n            Another link\n          </a> */}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SummaryTable;\n","// import React from \"react\";\nimport logo from \"./logo.svg\";\nimport React, { PureComponent } from \"react\";\n// import logo from \"./logo.svg\";\nimport \"./App.css\";\n// import BarChart from \"./components/BarChart\";\nimport LineChart from \"./components/LineChart\";\nimport SearchInput from \"./components/searchInput\";\nimport PlayerResults from \"./components/PlayerResults\";\nimport filterPlayer from \"./components/filterPlayer\";\nimport SummaryTable from \"./components/SummaryTable\";\nimport axios from \"axios\";\nimport * as d3 from \"d3\";\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <p>My Token = {window.token}</p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nexport default class App extends PureComponent {\n  state = {\n    selectedOption: \"E.Manning\"\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      filteredPlayer: filterPlayer(\"\", 30),\n      selectedOption: \"E.Manning\",\n      playerData: {}\n    };\n  }\n\n  callAPI() {\n    let selectedOption = this.state.selectedOption;\n    axios.get(`http://localhost:5000/data/${selectedOption}`).then(data => {\n      const parseTime = d3.timeParse(\"%Y\");\n      let playerData = data.data;\n      playerData.forEach(function(data) {\n        data.year = parseTime(data.game_year);\n        data.pass = +data.passing_yards_gained;\n        data.receive = +data.receiving_yards_gained;\n        data.rush = +data.rushing_yards_gained;\n      });\n      this.setState({ playerData: playerData });\n    });\n  }\n\n  componentDidMount() {\n    // let selectedOption = this.state.selectedOption;\n    // axios.get(`http://localhost:5000/data/${selectedOption}`).then(data => {\n    //   const parseTime = d3.timeParse(\"%Y\");\n    //   let playerData = data.data;\n    //   playerData.forEach(function(data) {\n    //     data.year = parseTime(data.game_year);\n    //     data.pass = +data.passing_yards_gained;\n    //     data.receive = +data.receiving_yards_gained;\n    //     data.rush = +data.rushing_yards_gained;\n    //   });\n    //   this.setState({ playerData: playerData });\n    this.callAPI();\n    // });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.selectedOption !== prevState.selectedOption) {\n      this.callAPI();\n    }\n  }\n\n  handleSelect = selectedOption => {\n    this.setState({ selectedOption });\n    // this.callAPI();\n    // console.log(this.state.selectedOption);\n    // <SummaryTable {this.state} />\n    // <BarChart {this.props.selectedOption}/>\n    // if (this.state.selectedOption) {\n    //   // const fields = this.state.fields.map(field => (\n    //   <BarChart selectedOption={this.state.selectedOption} />;\n    //   // ));\n    // }\n  };\n\n  handleSearchChange = event => {\n    this.setState({\n      filteredPlayer: filterPlayer(event.target.value, 20)\n    });\n  };\n\n  render() {\n    const data = this.state.playerData;\n\n    return (\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          <div className=\"col-sm-2 d-none d-md-block bg-light sidebar\">\n            <div className=\"sidebar-sticky\" id=\"sidebar\">\n              <SearchInput textChange={this.handleSearchChange} />\n              <PlayerResults\n                playerData={this.state.filteredPlayer}\n                onSelect={this.handleSelect.bind(this)}\n              />\n            </div>\n          </div>\n\n          <main role=\"main\" className=\"col-md-9 ml-sm-auto col-lg-10 pt-3 px-4\">\n            <div className=\"chartjs-size-monitor\">\n              <div className=\"chartjs-size-monitor-expand\"></div>\n              <div className=\"chartjs-size-monitor-shrink\"></div>\n            </div>\n            {/* <div className=\"row\">\n              <div className=\"col-sm-12\">\n                <SummaryTable id=\"summary\" {...this.state} />\n                <h2>Summary Statistics for {this.state.selectedOption}</h2>\n              </div>\n              <div className=\"col-sm-4\">\n                <div className=\"table-responsive\" id=\"summary-table\"></div>\n                <h2 className=\"h2\">Player Performance over Time</h2>\n              </div>\n            </div> */}\n\n            <div className=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pb-2 mb-3 border-bottom\">\n              <div\n                className=\"my-4 chartjs-render-monitor\"\n                id=\"chartbox\"\n                width=\"622\"\n                height=\"262\"\n              >\n                <SummaryTable data={data} {...this.state} />\n                <LineChart data={data} />\n                {/* <BarChart data={data} /> */}\n\n                {/* <BarChart id=\"BarChart\" ref=\"BarChart\" {...this.state} /> */}\n              </div>\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}